module VerifyExamples.Compiler exposing (Result, compile, todoSpec)

import String
import String.Util exposing (escape, indent, indentLines, unlines)
import VerifyExamples.Function as Function exposing (Function)
import VerifyExamples.ModuleName as ModuleName exposing (ModuleName)
import VerifyExamples.Test as Test exposing (Test)
import VerifyExamples.TestSuite as TestSuite exposing (TestSuite)


type alias Result =
    ( ModuleName, String )


type alias Nomenclature =
    { testModuleName : Int -> Test -> ModuleName
    , testName : Test -> String
    }


compile : Nomenclature -> TestSuite -> List Result
compile nomenclature suite =
    List.indexedMap
        (compileTest nomenclature suite)
        suite.tests


todoSpec : ModuleName -> Result
todoSpec moduleName =
    ( moduleName
    , unlines
        [ "module VerifyExamples." ++ ModuleName.toString moduleName ++ " exposing (..)"
        , ""
        , "-- This file got generated by [elm-verify-examples](https://github.com/stoeffel/elm-verify-examples)."
        , "-- Please don't modify this file by hand!"
        , ""
        , "import Test"
        , "import Expect"
        , ""
        , ""
        , "spec : Test.Test"
        , "spec ="
        , indent 1 <|
            "Test.todo \"module "
                ++ ModuleName.toString moduleName
                ++ ": No examples to verify yet!\""
        ]
    )


compileTest : Nomenclature -> TestSuite -> Int -> Test -> Result
compileTest nomenclature suite index test =
    let
        testModuleName =
            nomenclature.testModuleName index test

        testName =
            nomenclature.testName test
    in
    ( testModuleName
    , unlines
        [ moduleHeader suite testModuleName
        , toImports suite
        , unlines suite.types
        , ""
        , suite.helperFunctions
            |> List.map Function.toString
            |> unlines
        , ""
        , spec testName index test
        ]
    )


moduleHeader : TestSuite -> ModuleName -> String
moduleHeader { imports } moduleName =
    unlines
        [ "module VerifyExamples." ++ ModuleName.toString moduleName ++ " exposing (..)"
        , ""
        , "-- This file got generated by [elm-verify-examples](https://github.com/stoeffel/elm-verify-examples)."
        , "-- Please don't modify this file by hand!"
        , ""
        ]


toImports : TestSuite -> String
toImports { imports } =
    unlines
        [ "import Test"
        , "import Expect"
        , ""
        , unlines imports
        , ""
        ]


spec : String -> Int -> Test -> String
spec testName index test =
    unlines
        [ ""
        , ""
        , "spec" ++ String.fromInt index ++ " : Test.Test"
        , "spec" ++ String.fromInt index ++ " ="
        , indent 1 (testDefinition testName test)
        , indent 2 "\\() ->"
        , indent 3 "Expect.equal"
        , indentLines 4 (Test.specBody test)
        ]


testDefinition : String -> Test -> String
testDefinition testName test =
    String.concat
        [ "Test.test \""
        , testName
        , ": \\n\\n"
        , Test.exampleDescription test
            |> String.lines
            |> List.map (indent 1 >> escape)
            |> String.join "\\n"
        , "\" <|"
        ]
