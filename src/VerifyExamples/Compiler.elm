module VerifyExamples.Compiler exposing (compile)

import String
import String.Extra exposing (clean, ellipsis, replace, surround)
import String.Util exposing (escape, indent, unlines)
import VerifyExamples.Function exposing (Function)
import VerifyExamples.Test exposing (Test)
import VerifyExamples.TestSuite as TestSuite exposing (TestSuite)


type alias Info =
    { imports : List String
    , types : List String
    , functionToTest : String
    , helperFunctions : List Function
    , moduleName : String
    , testName : String
    }


compile : String -> TestSuite -> List ( String, String )
compile moduleName suite =
    let
        info =
            { imports = suite.imports
            , types = suite.types
            , functionToTest = suite.functionToTest
            , helperFunctions = suite.helperFunctions
            , moduleName = moduleName
            , testName = moduleName
            }
    in
    if TestSuite.notSpecial suite then
        [ ( moduleName
          , List.concat
                [ moduleHeader info
                , suite.tests
                    |> List.indexedMap (compileTest info)
                    |> List.concat
                ]
                |> unlines
          )
        ]
    else
        List.indexedMap (compileTestPerFunction << withExtendedTestName info) suite.tests


withExtendedTestName : Info -> Int -> ( Int, Info )
withExtendedTestName info index =
    ( index
    , { info
        | testName =
            info.moduleName
                ++ ".Function_"
                ++ info.functionToTest
                ++ "_Example"
                ++ toString index
      }
    )


compileTestPerFunction : ( Int, Info ) -> Test -> ( String, String )
compileTestPerFunction ( index, info ) test =
    ( info.testName
    , unlines <|
        List.concat
            [ moduleHeader info
            , info.types
            , [ "" ]
            , info.helperFunctions
                |> List.filter .isUsed
                |> List.map .value
            , [ "" ]
            , spec info test index
            ]
    )


compileTest : Info -> Int -> Test -> List String
compileTest info index test =
    spec info test index


moduleHeader : Info -> List String
moduleHeader { moduleName, testName, imports } =
    [ "module Doc." ++ testName ++ "Spec exposing (..)"
    , ""
    , "-- This file got generated by [elm-verify-examples](https://github.com/stoeffel/elm-verify-examples)."
    , "-- Please don't modify this file by hand!"
    , ""
    , "import Test"
    , "import Expect"
    , "import " ++ moduleName ++ " exposing(..)"
    , ""
    ]
        ++ imports
        ++ [ "" ]


spec : Info -> Test -> Int -> List String
spec { testName } test index =
    [ ""
    , ""
    , "spec" ++ toString index ++ " : Test.Test"
    , "spec" ++ toString index ++ " ="
    , indent 1 (testDefinition testName test)
    , indent 2 "\\() ->"
    , indent 3 "Expect.equal"
    ]
        ++ List.map (indent 4) (specBody test)


testDefinition : String -> Test -> String
testDefinition testName test =
    String.concat
        [ "Test.test \"", "Example: ", testName, " -- ", exampleName test, "\" <|" ]


exampleName : Test -> String
exampleName { assertion, expectation } =
    (assertion ++ " --> " ++ expectation)
        |> replace "\n" " "
        |> clean
        |> ellipsis 40
        |> surround "`"
        |> escape


specBody : Test -> List String
specBody { assertion, expectation } =
    List.concat
        [ [ "(" ]
        , String.lines assertion
        , [ ")", "(" ]
        , String.lines expectation
        , [ ")" ]
        ]
